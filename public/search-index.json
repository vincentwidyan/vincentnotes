[{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":0,"permalink":"/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":1,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"","date":"2023-09-07","id":2,"permalink":"/docs/guides/","summary":"","tags":[],"title":"Tutorial Python"},{"content":"Seringkali ketika sedang melakukan coding dengan Python, terdapat waktu yang direpresentasikan dengan tipe data string dan dibutuhkan konversi kembali ke nilai datetime dengan tipe data struct untuk tujuan tertentu. Di tutorial kali ini, akan dijelaskan mengenai cara konversi tipe data string ke datetime di Python.\n1. Apa yang harus dilakukan sebelum mengikuti tutorial ini? Pastikan kalian memiliki bahasa pemrograman Python yang terinstall di komputer kalian. Pastikan Python sudah include di path Comman Line kalian. For Your Info?\nJika kalian tidak ingin menginstall Python di komputer, kalian bisa gunakan Google Colaboratory dan coding dimanapun di browser kalian.\n2. Bagaimana cara konversi String ke Datetime di Python? Pada bagian ini, akan dijlelaskan mengenai cara konversi tipe data String ke Datetime di Python. Berikut adalah langkah-langkahnya.\n2.1 Import Datetime Library Pertama-tama, kita perlu melakukan importing library datetime. Library biasanya sudah terinstall bersamaan dengan instalasi Python. Akan tetapi, jika nantinya terdapat error, maka dapat dilakukan instalasi manual dengan command pip install datetime.\n# TODO : Import Datetime Libary from datetime import datetime\r2.2 Cara Konversi String ke Datetime menggunakan fungsi strptime() Pada bagian ini, akan digunakan fungsi strptime() di class datetime yang dapat melakukan konversi string ke datetime di Python. Karena tipe data String dapat bervariasi, di sini akan diberikan 4 (empat) contoh format string yang berbeda-beda yang akan dikonversi ke datetime. Lihat banner dibawah untuk melihat daftar lengkap format datetime.\nNote\nSemua format datetime dapat dilihat pada laman \u0026hellip;\n2.2.1 Contoh #1 Pada contoh 1, terdapat beberapa variable string yang dapat diformat sebagai %d $B, %Y\ndate1 = \u0026#39;14 February, 2023\u0026#39; date1_converted = datetime.strptime(date1,\u0026#39;%d %B, %Y\u0026#39;) print(\u0026#39;1. Date #1 Before Converted : \u0026#39;,date1) print(\u0026#39;2. Type Date #1 Before Converted : \u0026#39;, type(date1)) print(\u0026#39;3. Date #1 After Converted : \u0026#39;,date1_converted.date()) print(\u0026#39;4. Type Date #1 After Converted : \u0026#39;, type(date1_converted))\rKeluarannya adalah :\n1. Date #1 Before Converted : 14 February, 2023 2. Type Date #1 Before Converted : \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 3. Date #1 After Converted : 2023-02-14 4. Type Date #1 After Converted : \u0026lt;class \u0026#39;datetime.datetime\u0026#39;\u0026gt;\r2.2.2 Contoh #2 Pada contoh 2, terdapat beberapa variable string yang dapat diformat sebagai %Y%m%d\ndate2 = \u0026#39;20230214\u0026#39; date2_converted = datetime.strptime(date2,\u0026#39;%Y%m%d\u0026#39;) print(\u0026#39;1. Date #2 Before Converted : \u0026#39;,date2) print(\u0026#39;2. Type Date #2 Before Converted : \u0026#39;, type(date2)) print(\u0026#39;3. Date #2 After Converted : \u0026#39;,date2_converted.date()) print(\u0026#39;4. Type Date #2 After Converted : \u0026#39;, type(date2_converted))\rKeluarannya adalah :\n1. Date #2 Before Converted : 20230214 2. Type Date #2 Before Converted : \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 3. Date #2 After Converted : 2023-02-14 4. Type Date #2 After Converted : \u0026lt;class \u0026#39;datetime.datetime\u0026#39;\u0026gt;\r2.2.3 Contoh #3 Di contoh 3, terdapat beberapa variable string yang dapat diformat sebagai %Y-%m-%d %H:%M:%S\ndate3 = \u0026#39;2023-02-14 13:44:55\u0026#39; date3_converted = datetime.strptime(date3,\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) print(\u0026#39;1. Date #3 Before Converted : \u0026#39;,date3) print(\u0026#39;2. Type Date #3 Before Converted : \u0026#39;, type(date3)) print(\u0026#39;3. Date #3 After Converted : \u0026#39;,date3_converted) print(\u0026#39;4. Type Date #3 After Converted : \u0026#39;, type(date3_converted))\rKeluarannya adalah :\n1. Date #3 Before Converted : 2023-02-14 13:44:55 2. Type Date #3 Before Converted : \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 3. Date #3 After Converted : 2023-02-14 13:44:55 4. Type Date #3 After Converted : \u0026lt;class \u0026#39;datetime.datetime\u0026#39;\u0026gt;\r2.2.4 Contoh #4 Pada contoh 4, terdapat beberapa variable string yang dapat diformat sebagai %A %d %b %H:%M:%S %Y\ndate4 = \u0026#39;Tuesday 14 Feb 13:44:55 2023\u0026#39; date4_converted = datetime.strptime(date4,\u0026#39;%A %d %b %H:%M:%S %Y\u0026#39;) print(\u0026#39;1. Date #4 Before Converted : \u0026#39;,date4) print(\u0026#39;2. Type Date #4 Before Converted : \u0026#39;, type(date4)) print(\u0026#39;3. Date #4 After Converted : \u0026#39;,date4_converted) print(\u0026#39;4. Type Date #4 After Converted : \u0026#39;, type(date4_converted))\rKeluarannya adalah :\n1. Date #4 Before Converted : Tuesday 14 Feb 13:44:55 2023 2. Type Date #4 Before Converted : \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 3. Date #4 After Converted : 2023-02-14 13:44:55 4. Type Date #4 After Converted : \u0026lt;class \u0026#39;datetime.datetime\u0026#39;\u0026gt;\r3. Kode Berikut adalah kode lengkap pada tutorial ini tentang cara melakukan konversi String ke Datetime di Python.\ntutorial.py\r1# TODO : Import Datetime Libary 2from datetime import datetime 3 4# TODO : Example 1 5date1 = \u0026#39;14 February, 2023\u0026#39; 6date1_converted = datetime.strptime(date1,\u0026#39;%d %B, %Y\u0026#39;) 7 8print(\u0026#39;1. Date #1 Before Converted : \u0026#39;,date1) 9print(\u0026#39;2. Type Date #1 Before Converted : \u0026#39;, type(date1)) 10print(\u0026#39;3. Date #1 After Converted : \u0026#39;,date1_converted.date()) 11print(\u0026#39;4. Type Date #1 After Converted : \u0026#39;, type(date1_converted)) 12print(\u0026#39;\\n\u0026#39;) 13 14# TODO : Example 2 15date2 = \u0026#39;20230214\u0026#39; 16date2_converted = datetime.strptime(date2,\u0026#39;%Y%m%d\u0026#39;) 17 18print(\u0026#39;1. Date #2 Before Converted : \u0026#39;,date2) 19print(\u0026#39;2. Type Date #2 Before Converted : \u0026#39;, type(date2)) 20print(\u0026#39;3. Date #2 After Converted : \u0026#39;,date2_converted.date()) 21print(\u0026#39;4. Type Date #2 After Converted : \u0026#39;, type(date2_converted)) 22print(\u0026#39;\\n\u0026#39;) 23 24# TODO : Example 3 25date3 = \u0026#39;2023-02-14 13:44:55\u0026#39; 26date3_converted = datetime.strptime(date3,\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) 27 28print(\u0026#39;1. Date #3 Before Converted : \u0026#39;,date3) 29print(\u0026#39;2. Type Date #3 Before Converted : \u0026#39;, type(date3)) 30print(\u0026#39;3. Date #3 After Converted : \u0026#39;,date3_converted) 31print(\u0026#39;4. Type Date #3 After Converted : \u0026#39;, type(date3_converted)) 32print(\u0026#39;\\n\u0026#39;) 33 34# TODO : Example 4 35date4 = \u0026#39;Tuesday 14 Feb 13:44:55 2023\u0026#39; 36date4_converted = datetime.strptime(date4,\u0026#39;%A %d %b %H:%M:%S %Y\u0026#39;) 37 38print(\u0026#39;1. Date #4 Before Converted : \u0026#39;,date4) 39print(\u0026#39;2. Type Date #4 Before Converted : \u0026#39;, type(date4)) 40print(\u0026#39;3. Date #4 After Converted : \u0026#39;,date4_converted) 41print(\u0026#39;4. Type Date #4 After Converted : \u0026#39;, type(date4_converted))\r","date":"2023-09-07","id":3,"permalink":"/docs/guides/konversi-string-ke-datetime/","summary":"\u003cp\u003eSeringkali ketika sedang melakukan \u003cem\u003ecoding\u003c/em\u003e dengan Python, terdapat waktu yang direpresentasikan dengan tipe data string dan dibutuhkan konversi kembali ke nilai \u003ccode\u003edatetime\u003c/code\u003e dengan tipe data struct untuk tujuan tertentu. Di tutorial kali ini, akan dijelaskan mengenai cara konversi tipe data string ke \u003ccode\u003edatetime\u003c/code\u003e di Python.\u003c/p\u003e","tags":[],"title":"Konversi String ke Datetime"},{"content":"Saat coding dengan Python, terkadang kita akan membutuhkan sebuah nilai Datetime/Timestamp yang perlu disimpan dalam tipe data string. Selain mungkin kita akan menggunakannya untuk debugging/print, kita dapat mengguanak skema ini untuk menamai file output kita. Di tutorial kali ini, akan dijelaskan langkah-langkah untuk melakukan konversi tipe data Datetime ke String di Python.\n1. Apa yang harus dilakukan sebelum mengikuti tutorial ini? Pastikan kalian memiliki bahasa pemrograman Python yang terinstall di komputer kalian. Pastikan Python sudah include di path Comman Line kalian. For Your Info?\nJika kalian tidak ingin menginstall Python di komputer, kalian bisa gunakan Google Colaboratory dan coding dimanapun di browser kalian.\n2. Cara Konversi Datetime ke String di Python Pada part ini, akan dijleaskan mengenai langkah-langkah melakukan konversi tipe data datetime ke tipe data string di Python. Datetime yang digunakan di Python akan memiliki tipe data struct. Bagi beberapa orang, tipe data struct terbilang susah untuk diubah bentuk/digunakan pada beberapa skenario. Alih-alih tetap menggunakannya, biasanya tipe data ini akan lebih mudah jika dikonversi ke dalam tipe data string. Di bawah ini adalah langkah-langkah untuk mengkonversikan datetime dengan tipe data struct ke tipe data string :\n2.1 Import Datetime Library Pertama-tama, kita perlu untuk melakukan import library Datetime. Biasanya, library ini sudah terinstall saat kita melakukan instalasi Python. Jika tidak, kalian bisa menggunakan command pip install datetime di command line/terminal komputer kalian. Akan tetapi, jika kalian memilih Google Colaboratory, kalian tidak perlu kesusahan untuk melakukan instalasi ini. Kode di bawah ini diperlukan untuk melakukan import library datetime.\n# TODO : Import Datetime Library from datetime import datetime\r2.2 Me-assign ke sebuah Variable Setelah melakukan import, nilai datetime tersebut perlu di-assign ke sebuah variable karena kemungkinan besar nantinya nilai tersebut akan digunakan beberapa kali. Dengan kode di bawah ini, kita meng-assign nilai datetime tersebut ke variable dengan nama datetoday yang didapat menggunakan fungsi datetime.today().\n# TODO : Assign to a Variable datetoday = datetime.today()\r2.3 Menggunakan fungsi strftime() di Datetime Class Disinilah fungsi yang ditunggu-tunggu. Fungsi strftime() dapat melakukan konversi datetime dengan tipe data struct ke tipe data string di Python. Terdapat pula beberapa format untuk merepresentasikan datetime tersebut.\n# TODO : Assign to Variable with varying Format fulltimestamp = datetoday.strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) dateformat = datetoday.strftime(\u0026#34;%d/%m/%y\u0026#34;) otherdateformat = datetoday.strftime(\u0026#34;%A, %B %d %Y\u0026#34;) time24hour = datetoday.strftime(\u0026#34;%H:%M:%S\u0026#34;) time12hour = datetoday.strftime(\u0026#34;%I:%M:%S %p\u0026#34;) # TODO : Print each variable format print(\u0026#39;1. Full Timestamp Format :\u0026#39;, fulltimestamp) print(\u0026#39;2. Date Format :\u0026#39;, dateformat) print(\u0026#39;3. Other Date Format :\u0026#39;, otherdateformat) print(\u0026#39;4. 24-Hour Format :\u0026#39;, time24hour) print(\u0026#39;5. 12-Hour Format :\u0026#39;, time12hour)\rKeluarannya adalah :\n1. Full Timestamp Format : 2023-02-11 09:53:20 2. Date Format : 11/02/23 3. Other Date Format : Saturday, February 11 2023 4. 24-Hour Format : 09:53:20 5. 12-Hour Format : 09:53:20 AM\r2.4 Beberapa Format Code Berikut merupakan daftar format strftime di Python yang biasanya digunakan.\nFormat Description Result %d Menampilkan hari sebagai zero-padded desimal 01,02…,31 %A Menampilkan weekday lengkap Sunday, Monday,… %m Menampilkan bulan sebagai zero-padded desimal 01,02…,12 %B Menampilakn nama bulan January, February,… %y Menampilkan tahun sebagai zero-padded decimal 97,98,…,07,13,23 %Y Menampilkan nomor tahun lengkap 1998,2010,…,2023 %H Menampilkan 24-Hour Format 01,02,…,23 %I Menampilkan 12-Hour Format 01,02,…,12 %M Menampilkan menit sebagai zero-padded desimal 01,02,…,59 %S Menampilkan detik sebagai zero-padded desimal 01,02,…,59 %p Menampilkan tanda 12-Hour AM,PM 3. Kode Berikut merupakan kode lengkap cara melakukan konvert nilai datetime ke tipe data string di Python.\ntutorial.py\r1# TODO : Import Datetime Library 2from datetime import datetime 3 4# TODO : Assign to a Variable 5datetoday = datetime.today() 6 7# TODO : Assign to Variable with varying Format 8fulltimestamp = datetoday.strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) 9dateformat = datetoday.strftime(\u0026#34;%d/%m/%y\u0026#34;) 10otherdateformat = datetoday.strftime(\u0026#34;%A, %B %d %Y\u0026#34;) 11time24hour = datetoday.strftime(\u0026#34;%H:%M:%S\u0026#34;) 12time12hour = datetoday.strftime(\u0026#34;%I:%M:%S %p\u0026#34;) 13 14# TODO : Print each variable format 15print(\u0026#39;1. Full Timestamp Format :\u0026#39;, fulltimestamp) 16print(\u0026#39;2. Date Format :\u0026#39;, dateformat) 17print(\u0026#39;3. Other Date Format :\u0026#39;, otherdateformat) 18print(\u0026#39;4. 24-Hour Format :\u0026#39;, time24hour) 19print(\u0026#39;5. 12-Hour Format :\u0026#39;, time12hour)\r","date":"2023-09-07","id":4,"permalink":"/docs/guides/konversi-datetime-ke-string/","summary":"\u003cp\u003eSaat coding dengan Python, terkadang kita akan membutuhkan sebuah nilai Datetime/Timestamp yang perlu disimpan dalam tipe data \u003ccode\u003estring\u003c/code\u003e. Selain mungkin kita akan menggunakannya untuk debugging/print, kita dapat mengguanak skema ini untuk menamai file output kita. Di tutorial kali ini, akan dijelaskan langkah-langkah untuk melakukan konversi tipe data Datetime ke String di Python.\u003c/p\u003e","tags":[],"title":"Konversi Datetime ke String"},{"content":"1. Apa itu Epoch Time? Epoch Time adalah standardisasi representasi waktu yang digunakan di Unix timestamp yang setiap digit nomornya merepresentasikan setiap detik dari 1 Januari 1970. Epoch time mengandung 10 digit dan dapat merepresentasikan semua zona waktu dengan menambah 3600 detik setiap zonanya. Karena kegunaan standarnya digunakan di dalam database atau log, kita akan seringkali bersentuhan dengan Epoch format ini untuk melakukan konversi ke standar waktu biasa atau sebaliknya.\n2. Tutorial Di dalam tutorial ini, akan dijelaskan cara melakukan konversi Epoch ke datetime dan sebaliknya.\n2.1 Import Datetime Library Pertama-tama kita perlu melakukan import library datetime sehinga kita dapat mengguakan class datetime dan fungsi-fungsinya.\n# TODO : Import datetime library from datetime import datetime\r2.2 Cara konversi Epoch ke Datetime? Jika kita diberikan sebuah Epoch standar time, kita dapat menggunakan fungsi fromtimestamp() dan mengkonversi ke standar datetime. Kode di bawah ini menampilikan konversi Epoch time di sebuah variable dengan nama currentTime.\n# TODO : Convert Epoch to Datetime epochTime = 1676106378 currentTime = datetime.fromtimestamp(epochTime) print(\u0026#39;1. Current Epoch to Datetime : \u0026#39;,currentTime)\rKeluarannya adalah :\n1. Current Epoch to Datetime : 2023-02-11 09:06:18\r2.2 Cara Konversi Datetime ke Epoch? Jika kita diberikan sebuah dateime standar time dan kita ingin mengkonversi ke Epoch, kita dapat menggunakan kode di bawah ini. Berikut kode untuk mendapatkan datetime hari ini dengan datetime.today() library kemudian dikonversi menggunakan fungsi timestamp().\n# TODO : Convert Datetime to Epocj todaydate = datetime.today() epoch_convert = todaydate.timestamp() print(\u0026#39;2. Current Full Epoch Timestamp : \u0026#39;,epoch_convert) print(\u0026#39;3. Current Only Date Epoch Timestamp : \u0026#39;,str(epoch_convert)[0:10])\rKeluarannya adalah :\n2. Current Full Epoch Timestamp : 1676365612.225573 3. Current Only Date Epoch Timestamp : 1676365612\r3. Kode Berikut kode untuk melakukan konversi Epoch ke datetime dan konversi datetime ke Epoch di Python.\n# TODO : Import datetime library from datetime import datetime # TODO : Convert Epoch to Datetime epochTime = 1676106378 currentTime = datetime.fromtimestamp(epochTime) print(\u0026#39;1. Current Epoch to Datetime : \u0026#39;,currentTime # TODO : Convert Datetime to Epoch todaydate = datetime.today() epoch_convert = todaydate.timestamp() print(\u0026#39;2. Current Full Epoch Timestamp : \u0026#39;,epoch_convert) print(\u0026#39;3. Current Only Date Epoch Timestamp : \u0026#39;,str(epoch_convert)[0:10])\r","date":"2023-09-07","id":5,"permalink":"/docs/guides/konversi-epoch-ke-time-format/","summary":"\u003ch2 id=\"1-apa-itu-epoch-time\"\u003e1. Apa itu Epoch Time?\u003c/h2\u003e\n\u003cp\u003eEpoch Time adalah standardisasi representasi waktu yang digunakan di Unix timestamp yang setiap digit nomornya merepresentasikan setiap detik dari 1 Januari 1970. Epoch time mengandung 10 digit dan dapat merepresentasikan semua zona waktu dengan menambah 3600 detik setiap zonanya. Karena kegunaan standarnya digunakan di dalam database atau log, kita akan seringkali bersentuhan dengan Epoch format ini untuk melakukan konversi ke standar waktu biasa atau sebaliknya.\u003c/p\u003e","tags":[],"title":"Konversi Epoch ke Time Format"},{"content":"","date":"2023-09-07","id":6,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the Diátaxis framework ","date":"2023-09-07","id":7,"permalink":"/docs/reference/example-reference/","summary":"\u003cp\u003eReference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\u003c/p\u003e","tags":[],"title":"Example Reference"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":8,"permalink":"/docs/resources/","summary":"\u003cp\u003eLink to valuable, relevant resources.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":9,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":10,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":11,"permalink":"/","summary":"","tags":[],"title":"Welcome to Doks"},{"content":"","date":"0001-01-01","id":12,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":13,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":14,"permalink":"/tags/datetime/","summary":"","tags":[],"title":"Datetime"},{"content":"","date":"0001-01-01","id":15,"permalink":"/tags/python/","summary":"","tags":[],"title":"Python"},{"content":"","date":"0001-01-01","id":16,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]